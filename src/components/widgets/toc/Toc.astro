---
import type { MarkdownHeading } from 'astro'

import TocContent from './toc-content'
import TocLink from './toc-link'

interface Props {
  headings: MarkdownHeading[]
  title: string
}

const { headings, title } = Astro.props
---

<div class="ml-8 max-w-48">
  <ul class="pointer-events-auto">
    <li class="mb-3">
      <TocLink
        slug="title"
        href="#"
        data-hidden
        className={`
          transition-all duration-base
          data-[hidden=true]:opacity-0
          data-[hidden=true]:pointer-events-none
        `}>{title}</TocLink
      >
    </li>
    <TocContent {headings} />
  </ul>
</div>

<script>
  import { $$ } from '@/lib/dom'

  /* Hedings */
  const allHeadingsElements = $$('h1, h2')
  const allLinksToHeadings = $$<HTMLAnchorElement>('a[data-toc-link]')

  const options: IntersectionObserverInit = {
    root: null,
    rootMargin: '0px 0px -500px 0px',
    threshold: 1
  }

  const callback: IntersectionObserverCallback = (entries) => {
    entries.forEach(({ isIntersecting, target: { id: headingId } }) => {
      if (!isIntersecting) return

      allLinksToHeadings.forEach((linkToHeading) => {
        const { headingId: linkDataHeadingId } = linkToHeading.dataset

        const isLinkToCurrentHeading = linkDataHeadingId === headingId

        const isMainHeadingInView = allHeadingsElements[0].id === headingId
        allLinksToHeadings
          .item(0)
          .setAttribute('data-hidden', isMainHeadingInView + '')

        linkToHeading.setAttribute('data-active', isLinkToCurrentHeading + '')
      })
    })
  }

  const headingsObserver = new IntersectionObserver(callback, options)

  allHeadingsElements.forEach((headingElement) => {
    headingsObserver.observe(headingElement)
  })
</script>
